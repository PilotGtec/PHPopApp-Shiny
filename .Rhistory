summary(fit)
x <- c(-1, 1, 2, -2, 3, -3)
mean(x)
y <- c(-5,5, 20, -20, 40, -40)
mean(y)
(lm(y~x))$coeff[2]
(lm(y~x))$coeff[1]
y <- c(-5,5, 20, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
x <- c(-1, 1, 2, -2, 3, -3)
mean(x)
y <- c(-5,5, 20, -20, 40, -15, -25)
mean(y)
x <- c(-1, 1, 1, -2, 3, -3, 1)
mean(x)
y <- c(-5,5, 20, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
y <- c(-5,10, 10, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
x <- c(-1, 0, 2, -2, 3, -3, 1)
mean(x)
y <- c(-5,10, 10, -20, 40, -15, -25)
mean(y)
x <- c(-1, 0, 2, -2, 3, -3, 1)
mean(x)
y <- c(-5,10, 10, -20, 40, -15, -25)
mean(y)
y <- c(-5,15, 10, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
x <- c(-1, 0, 2, -2, 3, -3, 1)
mean(x)
y <- c(-5,15, 10, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
x <- c(-1, 0, 1, -1, 3, -3, 1)
mean(x)
y <- c(-5,15, 10, -20, 40, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
plot(x,y)
x <- c(-10, 0, 10, -1, 3, -3, 1)
mean(x)
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
x <- c(-10, 0, 10, -1, 3, -10, 10)
mean(x)
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
x <- c(-10, 0, 1, -1, 3, -3, 1)
mean(x)
x <- c(-10, 0, 10, -1, 3, -3, 1)
mean(x)
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
x <- c(-10, 0, 10, -1, 3, -12, 10)
mean(x)
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
plot(x,y)
.51/.5
0.51/0.5
w <- c(2, 1, 3, 1)
x <- c(0.18, 0.18, -1.54, rep(0.42, 3), 0.95)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.18, 0.18, -1.54, rep(0.42, 3), 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm (y~x-1)
summary(fit)
data(mtcars)
fit <- lm(mpg~wt, data=mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
sdx <- sd(x)
meanx <- mean(x)
(8.58-meanx) / sdx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
x <- c(-10, 0, 10, -1, 3, -12, 10)
mean(x)
y <- c(-5,15, 0, -20, 50, -15, -25)
mean(y)
(lm(y~x))$coeff[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
.4*1.5
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
w <- c(2, 1, 3, 1)
x <- c(0.18, 0.18, -1.54, rep(0.42, 3), 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm (y~x-1)
summary(fit)
data(mtcars)
fit <- lm(mpg~wt, data=mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
sdx <- sd(x)
meanx <- mean(x)
(8.58-meanx) / sdx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
fit$coeff[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
data(mtcars)
str(mtcars)
pairs(mtcars)
plot(mpg, cyl, data=cars)
plot(mpg, cyl, data=mtcars)
plot(mtcars$mpg, mtcars$cyl)
abline(lm(cyl~mpg), mtcars)
plot(mtcars$mpg, mtcars$cyl)
abline(lm(cyl~mpg), mtcars)
header(mtcars)
columns(mtcars)
column(mtcars)
str(mtcars)
abline(lm(cyl~mpg, mtcars))
pairs(mtcars, abline(0,1))
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(lsfit(x,y),col="blue")
}
pairs(mtcars, panel = twolines)
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(lm(x,y),col="blue")
}
pairs(mtcars, panel = twolines)
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(lmfit(x,y),col="blue")
}
pairs(mtcars, panel = twolines)
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(ls(x,y),col="blue")
}
pairs(mtcars, panel = twolines)
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(lsfit(x,y),col="blue")
}
pairs(mtcars, panel = twolines)
twolines = function(x,y) {
points(x,y,pch=".")
abline(line(x,y),col="red")
abline(lm(y~x),col="blue")
}
pairs(mtcars, panel = twolines)
lmfit = function(x,y) {
points(x,y,pch=".")
abline(lm(y~x),col="blue")
}
pairs(mtcars, panel = lmfit)
lm(cyl~mpg, mtcars)
summary(lm(cyl~mpg, mtcars))$r.squared
lmfit = function(x,y) {
points(x,y,pch=".")
abline(lm(y~x),col="blue")
print (summary(lm(y~x)$coeff[2])$r.squared)
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
abline(lm(y~x),col="blue")
print (summary(lm(y~x))$r.squared)
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
if (summary(lm(y~x))$r.squared){
abline(lm(y~x),col="blue")
}
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
if (summary(lm(y~x))$r.squared > 0.5000){
abline(lm(y~x),col="blue")
}
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
if (summary(lm(y~x))$r.squared > 0.7000){
abline(lm(y~x),col="blue")
}
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
if (summary(lm(y~x))$r.squared > 0.7000){
abline(lm(y~x),col="red", lwd=2)
}
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
print (summary(lm(y~x)))
if (summary(lm(y~x))$r.squared > 0.7000){
abline(lm(y~x),col="red", lwd=2)
}
}
pairs(mtcars, panel = lmfit)
lmfit = function(x,y) {
points(x,y,pch=".")
print (summary(lm(y~x))$p.value)
if (summary(lm(y~x))$r.squared > 0.7000){
abline(lm(y~x),col="red", lwd=2)
}
}
pairs(mtcars, panel = lmfit)
str(summary(lmfit))
pVal <- anova(lm(y~x))$'Pr(>F)'[1]
pVal
lmfit = function(x,y) {
points(x,y,pch=".")
pVal <- anova(lm(y~x))$'Pr(>F)'[1]
rSquared <- summary(lm(y~x))$r.squared
print (paste(pVal, ",", rSquared, sep=" "))
if ( rSquared > 0.7000){
abline(lm(y~x),col="red", lwd=2)
}
}
pairs(mtcars, panel = lmfit)
str(mtcars)
mtcars[mpg:qsec]
library(dplyr)
select(mtcars, mpg:qsec)
library(dplyr)
mtcars$am.unique()
unique(mtcars$am)
unique(mtcars$vs)
unique(mtcars$gear)
unique(mtcars$carb)
library(ggplot2)
d <- read.csv("/Users/erikafille/Desktop/DNL-20150113.csv")
d
plot(Volume~Price)
plot(d$Volume~d$Price)
qplot(Volume~Price, d)
qplot(Volume~Price, d)
qplot(Price, Volume, d)
str(d)
qplot(Price, Volume, d)
d$Volume <- numeric(d$Volume)
d <- read.csv("/Users/erikafille/Desktop/DNL-20150113.csv")
str(d)
qplot(Price, Volume, d)
header(d)
columns(d)
d.columns()
head(d)
columns(d)
d$columns
d$Proce
d$Price
qplot(Price, Volume, data=d)
library(slidify)
install.packages("shiny")
library(shiny)
setwd("~/Desktop/Coursera/Developing Data Products")
setwd("~/Desktop/Coursera/Developing Data Products/Shiny Project")
runApp()
runApp()
runApp()
c("Value 1" = "1", "Value 2" = "2", "Value 3" = "3")),
runApp()
library(datasets)
dprecipt <- precip
precip
summary(quakes)
uspop
euro
USAccDeaths
USArrests
LifeCycleSavings
library(datasets)
library(shiny)
library(googleVis)
install.packages("googleVis")
library(googleVis)
library(maps)
library(datasets)
LifeCycleSavings
LifeCycleSavings
names(LifeCycleSavings)
rownmaes(LifeCycleSavings)
rownaes(LifeCycleSavings)
rownames(LifeCycleSavings)
countries <- rownames(LifeCycleSavings)
LifeCycleSavings['Australia']
LifeCycleSavings[]['Australia']
LifeCycleSavings('Australia')
LifeCycleSavings['Australia',]
LifeCycleSavings['Australia',]$sr
dataTableOutput(LifeCycleSavings)
runapp()
runApp()
runApp()
runApp()
names(LifeCycleSavings)
data(stateMapEnv)
stateMapEnv
stateData$state.abb <- state.abb[match(USArrests$State, state.name)]
stateData <- data.frame(USArrests$State, USArrests$Murder)
names(USArrests)
stateData <- data.frame(USArrests$State, USArrests$Murder)
stateData <- data.frame(USArrests$State, USArrests$Rape)
len(USArrests$State)
length(USArrests$State)
USArrests
USArrests$State <- rownames(USArrests)
stateData <- data.frame(USArrests$State, USArrests$Rape)
stateData
state.abb
LifeCycleSavings$countries <- rownames(LifeCycleSavings)
gvisGeoChart(LifeCycleSavings, countries, sr)
gvisGeoChart(LifeCycleSavings, "countries", "sr")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataframe(LifeCycleSavings$countries, LifeCycleSavings$sr)
data.frame(LifeCycleSavings$countries, LifeCycleSavings$sr)
plotme <- data.frame(LifeCycleSavings$countries, LifeCycleSavings$sr)}
plotme <- data.frame(LifeCycleSavings$countries, LifeCycleSavings$sr)
pltme
colnames(plotme) <- c("country", "savings")
names(plotme)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(CityPopularity)
CityPopularity
gvisCountries
gvisHistogram
gvisMap
summary(gvisMap)
summary(gvisMap)
sstr(gvisMap)
str(gvisMap)
str(gvisMap(options()))
gvis
setwd("~/Desktop/Coursera/Developing Data Products/PHL Pop")
df <- read.csv("pop2010.csv")
df
df <- read.csv("pop2010.csv")
names(df)
df <- read.csv("pop2010.csv")
names(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(df)
df <- read.csv("pop2010.csv")
names(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plotme <- data.frame(df$Name, df$PopDen2010)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
setAccountInfo()
shinyapps::setAccountInfo(name='pilotgtec', token='DB3ED03FA8B499D8890F505E4CAD3A34', secret='GoncYVzU9uY3xrto4KT2+NV3twyo+XXJ7Qz1wTBH')
deployApp()
shinyapps::deployApp()
runApp()
deployApp()
deployApp(name="PHL Population")
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='pilotgtec', token='DB3ED03FA8B499D8890F505E4CAD3A34', secret='GoncYVzU9uY3xrto4KT2+NV3twyo+XXJ7Qz1wTBH')
deployApp()
deployApp(name='pilotgtec')
deployApp(appName='PH Pop Map')
deployApp(appName='PH-Pop-Map')
print(df)
runApp()
install.packages(pandoc)
install.packages('pandoc)
install.packages('pandoc')
